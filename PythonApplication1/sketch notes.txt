parse snapshots every "x" ms, before adding to deque, check if it is a copy, then if not, add it to deque

parse lines backwards using ' (apostrophe)

object should have:
caster
time
wep
CSS procs
total number affected

have number of casters pre input as an option?
possibly input names of everyone beforehand?
option to have list of weapons completely input beforehand
when adding casters to list of casters, once 30 (or max) is exceeded, check to see if a name already input shares high number of characters relative to length of name
>>> all this above is to not have any extra players or weapons displayed (example: beggars secrets vs beggarss ssecretss'' or low key vs lowkey)


possible solution to parsing is to have entire log be read, thrown into array of strings, then compare end of string[x] to the beginning of string[x+1], 
	delete until no matches and then squeeze them together.

idea for improving accuracy even further if necessary:
	try for some form of advanced thresholding. idea is to to "inverted" truncating, where values above a certain threshold are set to maximum value


keep in mind that swipe attacks dont have a name


perhaps automating the scrolling and 'nexting' of pages should be automated through the parser rather than a macro in bluestacks. might allow for faster, more accurate, and smoother parsing overall.


possibly implement a gui that shows options of windows to target, and also the ability to pick the size of the screen to be parsed



current idea for gathering and storing all parsed data
	program will manually scroll and click through all logs
	a smart detection of text needs to be implemented to perform a continuous parse
	this parse might be stored in a deque of "parse"
	clicking the next button on the logs should be dictated by if anything was ammended to the parse deque
	all reading of parses to ammend and compare should be done LIFO until an aqiquate amount of comparisons come up positive.
		taking note that there might be slight discrepencies between two lines in different parses. perhaps there is a library to compare lines of text to similarity?


steps:
	scroll through log
	scan log number
	go to next page
	completion of log


find a better library than pyautogui, for now it is functional